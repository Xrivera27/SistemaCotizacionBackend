const servicioService = require('../services/servicioService');

class ServicioController {
  
  // üîß CORREGIDO: Obtener todos los servicios con paginaci√≥n y filtros (m√∫ltiples categor√≠as)
  async getServicios(req, res) {
    try {
      console.log('=== GET SERVICIOS ===');
      console.log('Query params:', req.query);
      console.log('Usuario:', req.user);
      
      const filters = { ...req.query };
      
      const result = await servicioService.getServicios(filters);
      
      console.log(`‚úÖ Servicios encontrados: ${result.pagination.totalItems}`);
      
      // ‚úÖ ACTUALIZADO: Formatear servicios con m√∫ltiples categor√≠as
      const serviciosFormateados = result.servicios.map(servicio => 
        servicioService.formatServicioDisplay(servicio)
      );
      
      res.json({
        success: true,
        data: {
          servicios: serviciosFormateados,
          pagination: result.pagination
        }
      });
      
    } catch (error) {
      console.error('‚ùå Error obteniendo servicios:', error);
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor'
      });
    }
  }
  
  // üîß CORREGIDO: Obtener servicio por ID (con m√∫ltiples categor√≠as)
  async getServicioById(req, res) {
    try {
      console.log('=== GET SERVICIO BY ID ===');
      const { id } = req.params;
      console.log('ID solicitado:', id);
      
      const result = await servicioService.getServicioById(id);
      
      if (!result.success) {
        console.log('‚ùå Servicio no encontrado');
        return res.status(404).json(result);
      }
      
      console.log('‚úÖ Servicio encontrado:', result.servicio.nombre);
      
      // ‚úÖ ACTUALIZADO: Formatear servicio individual con m√∫ltiples categor√≠as
      const servicioFormateado = servicioService.formatServicioDisplay(result.servicio);
      
      // üÜï NUEVO: Obtener categor√≠as completas del servicio
      const categoriasResult = await servicioService.getCategoriesForServicio(id);
      
      res.json({
        success: true,
        data: { 
          servicio: {
            ...servicioFormateado,
            categorias_completas: categoriasResult.success ? categoriasResult.categorias : []
          }
        }
      });
      
    } catch (error) {
      console.error('‚ùå Error obteniendo servicio:', error);
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor'
      });
    }
  }
  
  // üîß CORREGIDO: Crear nuevo servicio (con m√∫ltiples categor√≠as)
  async createServicio(req, res) {
    try {
      console.log('=== CREATE SERVICIO ===');
      console.log('Datos recibidos:', req.validatedData);
      console.log('Usuario creador:', req.user);
      
      // üÜï NUEVO: Validar estructura de categor√≠as
      const { categorias, categoria_principal } = req.validatedData;
      
      if (categorias && Array.isArray(categorias)) {
        const validationResult = servicioService.validateCategoriasStructure(categorias);
        if (!validationResult.valid) {
          return res.status(400).json({
            success: false,
            message: validationResult.message
          });
        }
        
        // Verificar conflictos de nombres
        const conflictCheck = await servicioService.checkNameConflicts(
          req.validatedData.nombre, 
          categorias
        );
        
        if (conflictCheck.hasConflicts) {
          return res.status(400).json({
            success: false,
            message: 'Ya existe un servicio con ese nombre en una de las categor√≠as seleccionadas',
            conflicts: conflictCheck.conflicts
          });
        }
      }
      
      const result = await servicioService.createServicio(req.validatedData);
      
      if (!result.success) {
        console.log('‚ùå Error creando servicio:', result.message);
        return res.status(400).json(result);
      }
      
      console.log('‚úÖ Servicio creado exitosamente:', result.servicio.nombre);
      
      // ‚úÖ ACTUALIZADO: Formatear servicio creado con m√∫ltiples categor√≠as
      const servicioFormateado = servicioService.formatServicioDisplay(result.servicio);
      
      res.status(201).json({
        success: true,
        message: result.message,
        data: { servicio: servicioFormateado }
      });
      
    } catch (error) {
      console.error('‚ùå Error creando servicio:', error);
      
      if (error.name === 'SequelizeValidationError') {
        const errores = error.errors.map(err => ({
          campo: err.path,
          mensaje: err.message
        }));
        
        return res.status(400).json({
          success: false,
          message: 'Errores de validaci√≥n',
          errores
        });
      }
      
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor'
      });
    }
  }
  
  // üîß CORREGIDO: Actualizar servicio (con m√∫ltiples categor√≠as)
  async updateServicio(req, res) {
    try {
      console.log('=== UPDATE SERVICIO ===');
      const { id } = req.params;
      console.log('ID a actualizar:', id);
      console.log('Datos recibidos:', req.validatedData);
      
      // Verificar que el servicio existe
      const servicioCheck = await servicioService.getServicioById(id);
      if (!servicioCheck.success) {
        return res.status(404).json(servicioCheck);
      }
      
      // üÜï NUEVO: Validar categor√≠as si se proporcionan
      const { categorias } = req.validatedData;
      
      if (categorias && Array.isArray(categorias)) {
        const validationResult = servicioService.validateCategoriasStructure(categorias);
        if (!validationResult.valid) {
          return res.status(400).json({
            success: false,
            message: validationResult.message
          });
        }
        
        // Verificar conflictos de nombres (excluyendo el servicio actual)
        const conflictCheck = await servicioService.checkNameConflicts(
          req.validatedData.nombre || servicioCheck.servicio.nombre, 
          categorias,
          id
        );
        
        if (conflictCheck.hasConflicts) {
          return res.status(400).json({
            success: false,
            message: 'Ya existe un servicio con ese nombre en una de las categor√≠as seleccionadas',
            conflicts: conflictCheck.conflicts
          });
        }
      }
      
      const result = await servicioService.updateServicio(id, req.validatedData);
      
      if (!result.success) {
        console.log('‚ùå Error actualizando servicio:', result.message);
        return res.status(400).json(result);
      }
      
      console.log('‚úÖ Servicio actualizado exitosamente');
      
      // ‚úÖ ACTUALIZADO: Formatear servicio actualizado con m√∫ltiples categor√≠as
      const servicioFormateado = servicioService.formatServicioDisplay(result.servicio);
      
      res.json({
        success: true,
        message: result.message,
        data: { servicio: servicioFormateado }
      });
      
    } catch (error) {
      console.error('‚ùå Error actualizando servicio:', error);
      
      if (error.name === 'SequelizeValidationError') {
        const errores = error.errors.map(err => ({
          campo: err.path,
          mensaje: err.message
        }));
        
        return res.status(400).json({
          success: false,
          message: 'Errores de validaci√≥n',
          errores
        });
      }
      
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor'
      });
    }
  }
  
  // Eliminar servicio (soft delete)
  async deleteServicio(req, res) {
    try {
      console.log('=== DELETE SERVICIO ===');
      const { id } = req.params;
      console.log('ID a eliminar:', id);
      
      // Verificar que el servicio existe
      const servicioCheck = await servicioService.getServicioById(id);
      if (!servicioCheck.success) {
        return res.status(404).json(servicioCheck);
      }
      
      const result = await servicioService.deleteServicio(id);
      
      if (!result.success) {
        return res.status(400).json(result);
      }
      
      console.log('‚úÖ Servicio eliminado exitosamente');
      
      res.json(result);
      
    } catch (error) {
      console.error('‚ùå Error eliminando servicio:', error);
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor'
      });
    }
  }
  
  // Restaurar servicio
  async restoreServicio(req, res) {
    try {
      console.log('=== RESTORE SERVICIO ===');
      const { id } = req.params;
      console.log('ID a restaurar:', id);
      
      const result = await servicioService.restoreServicio(id);
      
      if (!result.success) {
        return res.status(404).json(result);
      }
      
      console.log('‚úÖ Servicio restaurado exitosamente');
      
      res.json(result);
      
    } catch (error) {
      console.error('‚ùå Error restaurando servicio:', error);
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor'
      });
    }
  }
  
  // Obtener estad√≠sticas de servicios
  async getEstadisticas(req, res) {
    try {
      console.log('=== GET ESTADISTICAS SERVICIOS ===');
      
      const result = await servicioService.getEstadisticas();
      
      console.log('‚úÖ Estad√≠sticas calculadas:', result.estadisticas);
      
      res.json({
        success: true,
        data: { estadisticas: result.estadisticas }
      });
      
    } catch (error) {
      console.error('‚ùå Error obteniendo estad√≠sticas:', error);
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor'
      });
    }
  }
  
  // Buscar servicios para autocompletado
  async searchServicios(req, res) {
    try {
      console.log('=== SEARCH SERVICIOS ===');
      const { q, limit = 10 } = req.query;
      
      if (!q || q.trim().length < 2) {
        return res.json({
          success: true,
          data: { servicios: [] }
        });
      }
      
      const result = await servicioService.searchServicios(q.trim(), limit);
      
      console.log(`‚úÖ Servicios encontrados para b√∫squeda: ${result.servicios.length}`);
      
      // ‚úÖ ACTUALIZADO: Formatear servicios de b√∫squeda con m√∫ltiples categor√≠as
      const serviciosFormateados = result.servicios.map(servicio => 
        servicioService.formatServicioDisplay(servicio)
      );
      
      res.json({
        success: true,
        data: { servicios: serviciosFormateados }
      });
      
    } catch (error) {
      console.error('‚ùå Error buscando servicios:', error);
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor'
      });
    }
  }
  
  // Obtener servicios activos (sin paginaci√≥n para selects)
  async getServiciosActivos(req, res) {
    try {
      console.log('=== GET SERVICIOS ACTIVOS ===');
      
      const result = await servicioService.getServiciosActivos();
      
      console.log(`‚úÖ Servicios activos encontrados: ${result.servicios.length}`);
      
      // ‚úÖ ACTUALIZADO: Formatear servicios activos con m√∫ltiples categor√≠as
      const serviciosFormateados = result.servicios.map(servicio => 
        servicioService.formatServicioDisplay(servicio)
      );
      
      res.json({
        success: true,
        data: { servicios: serviciosFormateados }
      });
      
    } catch (error) {
      console.error('‚ùå Error obteniendo servicios activos:', error);
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor'
      });
    }
  }
  
  // üîß CORREGIDO: Obtener servicios por categor√≠a (considerando m√∫ltiples categor√≠as)
  async getServiciosPorCategoria(req, res) {
    try {
      console.log('=== GET SERVICIOS POR CATEGORIA ===');
      const { categoria_id } = req.params;
      console.log('Categor√≠a ID:', categoria_id);
      
      const result = await servicioService.getServiciosPorCategoria(categoria_id);
      
      console.log(`‚úÖ Servicios encontrados para categor√≠a: ${result.servicios.length}`);
      
      // ‚úÖ ACTUALIZADO: Formatear servicios por categor√≠a con m√∫ltiples categor√≠as
      const serviciosFormateados = result.servicios.map(servicio => 
        servicioService.formatServicioDisplay(servicio)
      );
      
      res.json({
        success: true,
        data: { servicios: serviciosFormateados }
      });
      
    } catch (error) {
      console.error('‚ùå Error obteniendo servicios por categor√≠a:', error);
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor'
      });
    }
  }

  // üÜï NUEVO: Obtener todas las categor√≠as de un servicio
  async getCategoriesForServicio(req, res) {
    try {
      console.log('=== GET CATEGORIES FOR SERVICIO ===');
      const { id } = req.params;
      console.log('Servicio ID:', id);
      
      const result = await servicioService.getCategoriesForServicio(id);
      
      if (!result.success) {
        return res.status(404).json(result);
      }
      
      console.log(`‚úÖ Categor√≠as encontradas: ${result.categorias.length}`);
      
      res.json({
        success: true,
        data: { categorias: result.categorias }
      });
      
    } catch (error) {
      console.error('‚ùå Error obteniendo categor√≠as del servicio:', error);
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor'
      });
    }
  }

  // üÜï NUEVO: Obtener servicios con categor√≠as expandidas
  async getServiciosWithExpandedCategories(req, res) {
    try {
      console.log('=== GET SERVICIOS WITH EXPANDED CATEGORIES ===');
      
      const filters = { ...req.query };
      const result = await servicioService.getServiciosWithExpandedCategories(filters);
      
      console.log(`‚úÖ Servicios con categor√≠as expandidas: ${result.servicios.length}`);
      
      res.json({
        success: true,
        data: {
          servicios: result.servicios,
          pagination: result.pagination
        }
      });
      
    } catch (error) {
      console.error('‚ùå Error obteniendo servicios con categor√≠as expandidas:', error);
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor'
      });
    }
  }

  // üÜï NUEVO: Obtener servicios relacionados
  async getRelatedServicios(req, res) {
    try {
      console.log('=== GET RELATED SERVICIOS ===');
      const { id } = req.params;
      const { limit = 5 } = req.query;
      console.log('Servicio ID:', id, 'Limit:', limit);
      
      const result = await servicioService.getRelatedServicios(id, limit);
      
      if (!result.success) {
        return res.status(404).json(result);
      }
      
      console.log(`‚úÖ Servicios relacionados encontrados: ${result.servicios.length}`);
      
      res.json({
        success: true,
        data: { servicios: result.servicios }
      });
      
    } catch (error) {
      console.error('‚ùå Error obteniendo servicios relacionados:', error);
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor'
      });
    }
  }

  // üÜï NUEVO: Verificar conflictos de nombres
  async checkNameConflicts(req, res) {
    try {
      console.log('=== CHECK NAME CONFLICTS ===');
      const { nombre, categorias } = req.body;
      const { excludeId } = req.query;
      
      if (!nombre || !categorias || !Array.isArray(categorias)) {
        return res.status(400).json({
          success: false,
          message: 'Nombre y categor√≠as son requeridos'
        });
      }
      
      const result = await servicioService.checkNameConflicts(nombre, categorias, excludeId);
      
      console.log(`‚úÖ Verificaci√≥n de conflictos: ${result.hasConflicts ? 'Conflictos encontrados' : 'Sin conflictos'}`);
      
      res.json({
        success: true,
        data: {
          hasConflicts: result.hasConflicts,
          conflicts: result.conflicts
        }
      });
      
    } catch (error) {
      console.error('‚ùå Error verificando conflictos:', error);
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor'
      });
    }
  }

  // üÜï NUEVO: Obtener estad√≠sticas avanzadas por categor√≠a
  async getAdvancedCategoryStats(req, res) {
    try {
      console.log('=== GET ADVANCED CATEGORY STATS ===');
      
      const result = await servicioService.getAdvancedCategoryStats();
      
      if (!result.success) {
        return res.status(500).json(result);
      }
      
      console.log(`‚úÖ Estad√≠sticas avanzadas calculadas para ${result.estadisticas.length} categor√≠as`);
      
      res.json({
        success: true,
        data: { estadisticas: result.estadisticas }
      });
      
    } catch (error) {
      console.error('‚ùå Error obteniendo estad√≠sticas avanzadas:', error);
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor'
      });
    }
  }

  // üÜï NUEVO: Migrar servicios a m√∫ltiples categor√≠as
  async migrateToMultipleCategories(req, res) {
    try {
      console.log('=== MIGRATE TO MULTIPLE CATEGORIES ===');
      
      const result = await servicioService.migrateToMultipleCategories();
      
      console.log(`‚úÖ Migraci√≥n completada: ${result.message}`);
      
      res.json(result);
      
    } catch (error) {
      console.error('‚ùå Error en migraci√≥n:', error);
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor'
      });
    }
  }

  // üÜï NUEVO: Validar integridad de datos
  async validateDataIntegrity(req, res) {
    try {
      console.log('=== VALIDATE DATA INTEGRITY ===');
      
      const result = await servicioService.validateDataIntegrity();
      
      console.log(`‚úÖ Validaci√≥n completada: ${result.summary?.total_issues || 0} problemas encontrados`);
      
      res.json(result);
      
    } catch (error) {
      console.error('‚ùå Error en validaci√≥n:', error);
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor'
      });
    }
  }
}

module.exports = new ServicioController();